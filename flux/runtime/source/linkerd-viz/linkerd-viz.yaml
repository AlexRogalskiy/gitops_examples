---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRUks5aFIzNnZqLzIzYW04elhoY1p4akFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURVd05ERTBNREEwTWxvWApEVEl5TURVd05ERTBNREEwTWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2orQ0VvcnVVLzNwNXYzSzQ4eEhwdHgKNzBaRXFJaEtab1FLMTZtSFFXZ05aVjdGMXNaSXBNVVpweVdaTlNubjBVeVJGK2Z4eXdzelE4S2xNNHVMbG9VaQo0QXQ0ajM1aXMxL2pmTU5ucXVTOEVXWFVIYjRsZWJ6UHM2V0FBUE90MkY0aGhQTy9VSVhmN2orUFlUb1Bkb1NUCndCcHNQK2YwcnRCb1dvaXp6VE90NXBhRXhQc2UyS2RzNFpjTWR0QXM2elIzK25NMExBNXFyU2lDdU92S3ZPRWcKVDNYZnNSVlU5Ujl5Ym1PSFZsVVByYXdmUldXK1dIaS9yVVFBcGlBU0hvSytqbkFQekkvcjg2a2d2dElUOUVURgpzdFE4YUI0UWUvZFFKTWhKSTdHWUl3cG5CQ2VpYzlySmU5aW5EamdxZjFSdno1RkFzYkg1TTNhT2MzRXlZSmtDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLVXZoU1dRem9ldlYwTW1wUlhpdzJiMzNYdGJpVGp5CktncHNIQnpXcGFidzhBS01ERFh2b0NvV0JkUGVlRFhYMkIxKyt2YWxIRlBBbzVHVm5OSW0zY0ZXWWJabnVzNjAKMW1yTDU4Y2ZFS2hHdXFBdGVlZFZ0RGxrblY3clk4Tms0dFZXTUxYbHBNUmRqb0RrbWxSV2pFUEtmZGgrQTBzMwppRmw2dU9aSStMNEdXRmtmVnlFQkgzb3orcmJLbkdyYkRTdGNGd0hTR0VQc0MySUNzTU4yVllYckNXcXdQNFoxCitzYVFuVEdjU1FELytSUHFLSUJpa0xuQWJXdXRObGZRUk5sZnFGNGxhUlg3NnliNDZqTmJRZTJXcCtTSnFNZDMKYXV3cktiL2FwU0llSUlOdms4NUxneFlpNWNqVHkwRG9vSk9EUjZPa0tDWVV5SDZqLzkwT3dpMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcVA0SVNpdTVUL2VubS9jcmp6RWVtM0h2UmtTb2lFcG1oQXJYcVlkQmFBMWxYc1hXCnhraWt4Um1uSlprMUtlZlJUSkVYNS9ITEN6TkR3cVV6aTR1V2hTTGdDM2lQZm1LelgrTjh3MmVxNUx3UlpkUWQKdmlWNXZNK3pwWUFBODYzWVhpR0U4NzlRaGQvdVA0OWhPZzkyaEpQQUdtdy81L1N1MEdoYWlMUE5NNjNtbG9URQoreDdZcDJ6aGx3eDIwQ3pyTkhmNmN6UXNEbXF0S0lLNDY4cTg0U0JQZGQreEZWVDFIM0p1WTRkV1ZRK3RyQjlGClpiNVllTCt0UkFDbUlCSWVncjZPY0EvTWordnpxU0MrMGhQMFJNV3kxRHhvSGhCNzkxQWt5RWtqc1pnakNtY0UKSjZKejJzbDcyS2NPT0NwL1ZHL1BrVUN4c2ZremRvNXpjVEpnbVFJREFRQUJBb0lCQVFDV0hxUnFqeERka3RpWAoyaWdkMmJxZ3g4T1FubWxBT1NkOFlNMVgwY2t1ajhmZk9zd2g5R0k2blNFNGF6TW8rTCthenNGM3ovbFpCNzlICjU4MDBSMW45QnhBVDRKTkg2SklEdW1nWWhienYySWx6OWN3K0g3aFhIQU13SDllNG9GUTJ1bndLczRicWhoUjAKN2YrbXZobkFpQ2Y4MFBDc00xWWYyTE9rQUdWblk4QmtyVjJucTdlUFg1czJ2cTl3U1kxMG9KUWczMUwzb1Ewbgp0dXV6M0haUjZFWjdLRUtsK2NVdGVPSER6TXVvOTlwUC9xS0dINkU1cy9pRUdzY2Y3RmVOYjZYUDVCT01YdFNECktHRUx5dVlwMU9MN2hjcUFVNnNzTjRSMHpjb05aUy9LOFlidUJnOWtFaGdSMmtBNkRFNkpBbFBWUmZuVSt0cXYKc2ZyL1JWSWhBb0dCQU5ZQ0RvSFRQVzY2ZWRoekRSOWRvVmg4aVRjbUJLdk9XLzVPaGlZellMdG5FQjBYcWIvUApsQnNZOWhqSkpCVkFMZHB3blNYU2kzWERBK2JPeEJrckVyVHZnRkN6OUQweE1hSXJnZC85NjRKMS8zWCtUaWtkCjRVdTBSMDRwOGZmeTBPYUhnOUVLd29LcXlMYTJEYnNWMFU5MHVoeXJjM3k2UjMzRXVNQzFDS0d0QW9HQkFNb20KeE5LSmlhcFN1U3lFKytTeEx5M002cENJZU0zWlZrK2U5MWZMSjQyeDk2MEhINzcxT3BBYUVpS09mcnNRRUpzOQpCRXcyYzNMNE1vSmNqK3JZSjJ2SW1DSWp1KzVIVlNzbGg5aHZNbTl5azZGZE9PbGI2MW1HdTFhR1Z0TDZFTWVoCm90d0RoQXEzcTNIbEtLOGRaMHkyMGZnelNFRlBsVzJSZkV4NXVsQWRBb0dBRWxOaXdxTkFJM2M4YjlpS1N5Rk4KYTdKZVhhYVh4ODZIK2lMblFlWXNabC9ROVd6TlVHdUtGemZ2K3ZkZWE2TnZTY0ZTODZZdjR3bXNEOXVzMXlybApFekZmSDRvSlpDUU9TQURKd2xDUUZqL2NmRkltaDBiVHdCUFQ5MUdJTXQ5TUhER0dqQ1FMdS95NzYwbHpxNDJXCnV1TVgvTlNCc3pDUVpxaXQyWEtuSnBFQ2dZQlJsNXhScmhuV21WVU1WeENrbWErRk9QUmtLZkU0aE1TRmxwQVcKNjNTbmlIR0RjU0NySHFmb2lkMVAvVnZCZlJaMjBnWHVEUHhFSjFHYnRHaVNUWFI3MkpjdkVHVkdJNXlJc2JsRwo3bnJZNk5JVmkxN3hNWnlvb2V6elczMm40aTdycEozclY2L3Y4M3BMbWtiMWgxU3ViZ3dKdGdrdjgwTkkyalBsCldpeU5NUUtCZ0hHdXpvaUNNWGlLSU8zSG1tY1F4eThiRlpCNi9lM0EyYzBCcEwvU3diaTZxTHFEM0JTanNGdnkKTDVmMkxtRGVKbFk3TWxsaE1wS3p5NE8rYWdnbXF6S2FpMzgzOTZveUFzZXUwb2NiQlF3OStzSmhaYjloeWNXZApYWTlOZUVURkdwU1NucS9jYmdGZW5VTUVQbG9TTUtEMUtFaEFQazlvd1Z6SEg4VWh1ZkhkCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRUks5aFIzNnZqLzIzYW04elhoY1p4akFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURVd05ERTBNREEwTWxvWApEVEl5TURVd05ERTBNREEwTWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2orQ0VvcnVVLzNwNXYzSzQ4eEhwdHgKNzBaRXFJaEtab1FLMTZtSFFXZ05aVjdGMXNaSXBNVVpweVdaTlNubjBVeVJGK2Z4eXdzelE4S2xNNHVMbG9VaQo0QXQ0ajM1aXMxL2pmTU5ucXVTOEVXWFVIYjRsZWJ6UHM2V0FBUE90MkY0aGhQTy9VSVhmN2orUFlUb1Bkb1NUCndCcHNQK2YwcnRCb1dvaXp6VE90NXBhRXhQc2UyS2RzNFpjTWR0QXM2elIzK25NMExBNXFyU2lDdU92S3ZPRWcKVDNYZnNSVlU5Ujl5Ym1PSFZsVVByYXdmUldXK1dIaS9yVVFBcGlBU0hvSytqbkFQekkvcjg2a2d2dElUOUVURgpzdFE4YUI0UWUvZFFKTWhKSTdHWUl3cG5CQ2VpYzlySmU5aW5EamdxZjFSdno1RkFzYkg1TTNhT2MzRXlZSmtDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLVXZoU1dRem9ldlYwTW1wUlhpdzJiMzNYdGJpVGp5CktncHNIQnpXcGFidzhBS01ERFh2b0NvV0JkUGVlRFhYMkIxKyt2YWxIRlBBbzVHVm5OSW0zY0ZXWWJabnVzNjAKMW1yTDU4Y2ZFS2hHdXFBdGVlZFZ0RGxrblY3clk4Tms0dFZXTUxYbHBNUmRqb0RrbWxSV2pFUEtmZGgrQTBzMwppRmw2dU9aSStMNEdXRmtmVnlFQkgzb3orcmJLbkdyYkRTdGNGd0hTR0VQc0MySUNzTU4yVllYckNXcXdQNFoxCitzYVFuVEdjU1FELytSUHFLSUJpa0xuQWJXdXRObGZRUk5sZnFGNGxhUlg3NnliNDZqTmJRZTJXcCtTSnFNZDMKYXV3cktiL2FwU0llSUlOdms4NUxneFlpNWNqVHkwRG9vSk9EUjZPa0tDWVV5SDZqLzkwT3dpMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 05927c98b774f2c38db2503050ffe514a5d97c9c0dde92de49dce84f7f9e5236
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9RVC9oWEJpSTIwUlVpN2NsSnc3ODh3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMQpNRFF4TkRBd05ETmFGdzB5TWpBMU1EUXhOREF3TkROYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDLzBvS1pCa0VxMzhZQ0YrNVhHNmFsV3M3WDRKaEh5Z2RSNW5tdVB0S25xc0NIVGtQRHVNZnc5MnpKd2sxcAo2MmdHYWRhMnBHTVBBTDdlemx3VkpNNjdZb2ZuQ3p3QWxsZVdYc2pLTFZqdzlQL3dXeFZLdmh0QUZqb1hwcWhZClJhb21PeUUxU2dFUjZZRmlLdlVvWUNQTkMrRE9BRTlXMXBqKzd5czFHMnNQQTdOdlNmaG5aQ2w5Yml0ejlRRjQKZU81bVRtS2ZxcCtHMWVhaFEzcURadTREL3lRT08zVGN6UVlEWE1DbHBrQk5XanRtNDZpYzN0NHR1R0o3OUFmNwpYd001ZDRWTzRlNTU4M1VDQ2ppYkhWNVk5R1g4OXdFNDU3SFh5bXVmczZ4YW1VZkx2WElIbytERUxaZ2xQUVpMCmlVQW1QY25mMTZjMUhUYjAvOGkyMG5EeEFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFIbW5ZS3B5b1I1VmQySXZWR0xUTGl4c3VKa1pXK0tPVkdoMVluUG0wL2FzZ0pydWFaU1BmYVVQSkUKTStJUElTdmZKUGhSN0FKL0hHY3pBY2NtOW9CT0dFZWNmUTkrS09uUnVHTkJNVUVGR3R4TTZzSGh3cm5mUUd1YwpKTnBhdE5PeHlENnhpc0Rzb2w0SHdBQnFlT3E0VXVmblpkSlRGeVBBemJEei9XRUJsRUkzK0JzVWduclp3WTM5CnBxT1c3VnEzZk9Pek5ZOVFuT1ZrN1pnT1hoUElUaEw1RmhmK1RvdG10U1Z2cVZ2NXZkaWZFVXhpemlHQmRMYlAKM2VlY3hpQkxQdnJpZzlkQ2xiYTFpTzBQR2lTWldKalloSDFBSEtMUEQ0MWEwOU04WnE1U0g0WGhLeWFaMkdiMApUV29UV0lKdUVybWdCRGExOGpXZ2xaRWo4TjNGCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdjlLQ21RWkJLdC9HQWhmdVZ4dW1wVnJPMStDWVI4b0hVZVo1cmo3U3A2ckFoMDVECnc3akg4UGRzeWNKTmFldG9CbW5XdHFSakR3QyszczVjRlNUT3UyS0g1d3M4QUpaWGxsN0l5aTFZOFBULzhGc1YKU3I0YlFCWTZGNmFvV0VXcUpqc2hOVW9CRWVtQllpcjFLR0FqelF2Z3pnQlBWdGFZL3U4ck5SdHJEd096YjBuNApaMlFwZlc0cmMvVUJlSGp1Wms1aW42cWZodFhtb1VONmcyYnVBLzhrRGp0MDNNMEdBMXpBcGFaQVRWbzdadU9vCm5ON2VMYmhpZS9RSCsxOERPWGVGVHVIdWVmTjFBZ280bXgxZVdQUmwvUGNCT09leDE4cHJuN09zV3BsSHk3MXkKQjZQZ3hDMllKVDBHUzRsQUpqM0ozOWVuTlIwMjlQL0l0dEp3OFFJREFRQUJBb0lCQVFDa2xOT2t3KzhLQURGOQovbFpxdXJqQ3l5VUpxQlJBRkNFdnJoWGM0TjRSS2JwQzNXM2E4aUhxcC8vWkpETVRtLzBHODZ4YnpMT0pYZFJtCmlwd0xNQ2VJTTBQemdub2E3dU43aXh1d0REUnhtV1EzTDQ4WE1BRmxmU3lldWtsYVkzdFhqZ2d5RnFyUVdZNi8KVWFoQzJpb2RkZ0dOL2tvVWNjK1hmRkdRSVZRNzdpNXE2aWdFdmw5a2FwZjRSM1EvcFdxdjkxMXppMG1PVkltdAo2WXhCNHB6WnBXMXFCdlQ1ajAvSy9aWmcybUg2NTB3SE1FdEVpY0FsL1Q3cWtvRXc1UUJvVVl0clZkMG1McDBrClltbmFxVG0ydjZZdkJmSXZKdUlDTjVaekNyRWpEejE3NnAvWW5mY01NeEdhOW8xZURkUjJBTDRxOUVyUDl5MlkKRTdqc3JBeWhBb0dCQU5VcUZJNS9ERDlaZno2ZVZ0WGI5R2NyejJOOGRvMEpnSlZpQStwTVkyMTBMNkltMjY2cgpVdHNOVUdkODZPcjc0aFZURCtTZnFhQ2dsVWp3ZkF3aXRLNXBhbVFGOHZsV000K1NpY2c2ditLUVZsalZuWVNrCktvR01odVU3MnlTaVdnbDFaZGNVUkVYbVhCRUttU05HWkd1UHpJamZoNU5YMkw3L3dnTU51VmRWQW9HQkFPWmUKaE9zWGZWMWdIdFlZR1hTMGZCcXF1dEFqM1YvSFNaSS90MWhLcjhZdVVURVJhWTdaRWkxa0VvUDY2SWp1WldmTQpad3RZUkZ5SjAxS2VYODlTeVhLbE1TNENwSDJ0QWFHeUMrTlQ5V2dMQzJ3QzVsb0ovRFBHd1B4dUtvMGpldmEzCnNvR1R4RmxxYWxQTnd4YjJ4M09iTGt6NTdZTVdHcEU0VEFrcXA3c3RBb0dBUjViY1ZJY0NtL3Y0cWhVUFlMK0EKTTI0Wk5uWkVjbFZ3bzdySlNkVGh4NDZ2dUt1SU4vODkwbWVFUzEwOTlEMG56cldZcnRXWWFHUEYvenNVemhhUgp5OG1IZTVRcjUrVTFaOUIxQ1pRQmdadXNCQ1dwd3pSSE9qN3h4dWIxVURaZU9yTDh3dUVCbE9BcXAyYUJ5OEVHClZNRjBsYnRNa3dWN3U1bTFsTVQxTEFrQ2dZQWFYZVVldDBDTkNHeGZHc0VISDRVNDFDT3ZvUHM4ZENYU2pHSmkKdzZHY3NENXd2RXAxcEJpMWcwZXZQVytTQko4c296T0VFK1UzSmpzK3NJdk13ZS8ycER1ZHhZV29NTDRJRU1YVgpqZzEvakF3Um43OVh2TjdWMmtES1k1MlJLK2R1QjVaeHlFVG42d3NpYm1HTzVrM3J5RzRqTjFQYzloR3lYMXdzCmpHcElQUUtCZ1FDVVd5cDhPQnN1K1RTdWp5NmhLbFFubEcrajcxTkYraVByVlpsUG1yQTVsWW9QL001djlacnEKVFUxM1h0TDlxSTZRajlKc3U4TTRMZno4aStHK0NKbjUyTk05TXBGRzYrbklFTEREYlRXUnhzQlB1Y1lSdFFybwo5b3NqZDZyZHFIek94T3J6ZE4wZHYrUVRtYndGbXRCUzBsOG1jT3VHR2N2TWZJNmcrZ1o5cGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9RVC9oWEJpSTIwUlVpN2NsSnc3ODh3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMQpNRFF4TkRBd05ETmFGdzB5TWpBMU1EUXhOREF3TkROYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDLzBvS1pCa0VxMzhZQ0YrNVhHNmFsV3M3WDRKaEh5Z2RSNW5tdVB0S25xc0NIVGtQRHVNZnc5MnpKd2sxcAo2MmdHYWRhMnBHTVBBTDdlemx3VkpNNjdZb2ZuQ3p3QWxsZVdYc2pLTFZqdzlQL3dXeFZLdmh0QUZqb1hwcWhZClJhb21PeUUxU2dFUjZZRmlLdlVvWUNQTkMrRE9BRTlXMXBqKzd5czFHMnNQQTdOdlNmaG5aQ2w5Yml0ejlRRjQKZU81bVRtS2ZxcCtHMWVhaFEzcURadTREL3lRT08zVGN6UVlEWE1DbHBrQk5XanRtNDZpYzN0NHR1R0o3OUFmNwpYd001ZDRWTzRlNTU4M1VDQ2ppYkhWNVk5R1g4OXdFNDU3SFh5bXVmczZ4YW1VZkx2WElIbytERUxaZ2xQUVpMCmlVQW1QY25mMTZjMUhUYjAvOGkyMG5EeEFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFIbW5ZS3B5b1I1VmQySXZWR0xUTGl4c3VKa1pXK0tPVkdoMVluUG0wL2FzZ0pydWFaU1BmYVVQSkUKTStJUElTdmZKUGhSN0FKL0hHY3pBY2NtOW9CT0dFZWNmUTkrS09uUnVHTkJNVUVGR3R4TTZzSGh3cm5mUUd1YwpKTnBhdE5PeHlENnhpc0Rzb2w0SHdBQnFlT3E0VXVmblpkSlRGeVBBemJEei9XRUJsRUkzK0JzVWduclp3WTM5CnBxT1c3VnEzZk9Pek5ZOVFuT1ZrN1pnT1hoUElUaEw1RmhmK1RvdG10U1Z2cVZ2NXZkaWZFVXhpemlHQmRMYlAKM2VlY3hpQkxQdnJpZzlkQ2xiYTFpTzBQR2lTWldKalloSDFBSEtMUEQ0MWEwOU04WnE1U0g0WGhLeWFaMkdiMApUV29UV0lKdUVybWdCRGExOGpXZ2xaRWo4TjNGCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 8345917f936e89e2d87b0c4772d7d1e0655f7f89f74254394195f9252c1ba577
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
